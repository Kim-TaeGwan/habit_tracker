{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","key","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69d6058.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  componentDidMount() {\n    console.log(`habit: ${this.props.habit.name} mounted`);\n  }\n  componentDidUpdate() {\n    console.log(`habit: ${this.props.habit.name} upadate`);\n  }\n  componentWillUnmount() {\n    console.log(`habit: ${this.props.habit.name} will unmount`);\n  }\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n  render() {\n    const { name, count } = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { memo } from \"react\";\n\nconst HabitAddForm = memo(props => {\n  // class컴포넌트에서는 PureComponent를 사용하지만 state가 없다면 function컴포넌트에서 memo 사용\n  const formRef = React.createRef();\n  const inputRef = React.createRef(); // ref 생성, ref로 멤버 변수로 정의\n\n  const onSubmit = event => {\n    // submit은 실행이 되면 자동적으로 브라우저가 새로고침된다.\n    // 다른페이지로 넘어가는걸 예상하고 있기 때문이다.\n    event.preventDefault(); // 브라우저의 기본 기능을 취소\n    // console.log(event);\n    // console.log(this.inputRef.current.value); // 현재들어있는 요소의(current) value를 읽어온다\n    const name = inputRef.current.value;\n    name && props.onAdd(name); // name이 있다면 onAdd에 name을 전달\n    // this.inputRef.current.value = \"\"; // 미리입력한거 초기화, 또는 아래처럼 form을 초기화 가능\n    formRef.current.reset();\n  };\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Habit\"\n        ref={inputRef} // ref로 만든 멤버변수를 연결\n      />\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n\n// import React, { PureComponent } from \"react\";\n\n// class HabitAddForm extends PureComponent {\n//   formRef = React.createRef();\n//   inputRef = React.createRef(); // ref 생성, ref로 멤버 변수로 정의\n\n//   onSubmit = event => {\n//     // submit은 실행이 되면 자동적으로 브라우저가 새로고침된다.\n//     // 다른페이지로 넘어가는걸 예상하고 있기 때문이다.\n//     event.preventDefault(); // 브라우저의 기본 기능을 취소\n//     // console.log(event);\n//     // console.log(this.inputRef.current.value); // 현재들어있는 요소의(current) value를 읽어온다\n//     const name = this.inputRef.current.value;\n//     name && this.props.onAdd(name); // name이 있다면 onAdd에 name을 전달\n//     // this.inputRef.current.value = \"\"; // 미리입력한거 초기화, 또는 아래처럼 form을 초기화 가능\n//     this.formRef.current.reset();\n//   };\n\n//   render() {\n//     return (\n//       <form ref={this.formRef} className=\"add-form\" onSubmit={this.onSubmit}>\n//         <input\n//           type=\"text\"\n//           className=\"add-input\"\n//           placeholder=\"Habit\"\n//           ref={this.inputRef} // ref로 만든 멤버변수를 연결\n//         />\n//         <button className=\"add-button\">Add</button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  handleIncrement = habit => {\n    this.props.onIncrement(habit);\n  };\n  handleDecrement = habit => {\n    this.props.onDecrement(habit);\n  };\n  handleDelete = habit => {\n    this.props.onDelete(habit);\n  };\n  handleAdd = name => {\n    this.props.onAdd(name);\n  };\n  render() {\n    return (\n      <div>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map(habit => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n              onAdd={this.handleAdd}\n            />\n          ))}\n        </ul>\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Resaet All\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count \">{this.props.totalCount}</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport \"./app.css\";\n// import HabitAddForm from \"./components/habitAddForm\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n      { id: 4, name: \"Cook\", count: 0 },\n      { id: 5, name: \"Game\", count: 0 },\n    ],\n  };\n  // handleIncrement = habit => {\n  //   const habits = [...this.state.habits]; // habits에 있는 object들을 복사\n  //   const index = habits.indexOf(habit); // habits 배열안에 있는 index(habit)를 찾는다, 배열안에 몇번째에 있는지\n  //   habits[index].count++; // 배열의 index의 count를 증가\n  //   // 복사한 이유는 state의 데이터를 부분적으로 업데이트를 하면 react는 그것을 모른다.\n  //   // 그래서 전체적으로 업데이트를 해주어야 한다\n  //   this.setState({ habits: habits }); // 복사해온 배열을 업데이트\n  // };\n  handleIncrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 }; // 기존 habit의 key,value들이 하나씩 만들어 진다, 새로운 object가 만들어짐\n      } else {\n        return item;\n      }\n    });\n    this.setState({ habits: habits }); // 복사해온 배열을 업데이트\n  };\n  // handleDecrement = habit => {\n  //   const habits = [...this.state.habits]; // habits에 있는 object들을 복사\n  //   const index = habits.indexOf(habit); // habits 배열안에 있는 index(habit)를 찾는다, 배열안에 몇번째에 있는지\n  //   const count = habits[index].count - 1; //배열의 index의 count를 감소\n  //   habits[index].count = count < 0 ? 0 : count;\n  //   // 복사한 이유는 state의 데이터를 부분적으로 업데이트를 하면 react는 그것을 모른다.\n  //   // 그래서 전체적으로 업데이트를 해주어야 한다\n  //   this.setState({ habits: habits }); // 복사해온 배열을 업데이트\n  // };\n  handleDecrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count }; // 기존 habit의 key,value들이 하나씩 만들어 진다, 새로운 object가 만들어짐\n      } else {\n        return item;\n      }\n    });\n    this.setState({ habits: habits }); // 복사해온 배열을 업데이트\n  };\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id); // 새로운 배열을 만들어 동일한 hibit의 id가 아닌 데이터만 뽑을 것.\n    this.setState({ habits: habits }); // 복사해온 배열을 업데이트\n  };\n  handleAdd = name => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name: name, count: 0 },\n    ];\n    this.setState({ habits: habits });\n  };\n  // handleReset = () => {\n  //   const habits = this.state.habits.map(habit => {\n  //     habit.count = 0; // habit의 count를 0 으로 만들고\n  //     return habit; // habit을 리턴시킴\n  //   });\n  //   this.setState({ habits });\n  // };\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      } else {\n        return habit;\n      }\n    });\n    this.setState({ habits });\n  };\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter(item => item.count > 0).length}\n        />\n        {/* <HabitAddForm /> */}\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n// import SimpleHabit from \"./components/simpleHabit\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <SimpleHabit /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}